# -*- coding: utf-8 -*-
"""numpy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/122N6wNfhjJRbiK88LldyFpoBLV9ABW9R
"""

print("mounika")

"""# Creating Numpy Arrays"""

import numpy as np
py_list = [1,2,3,4,5]
np_array_from_list = np.array(py_list)
print(np_array_from_list)

py_tuple = (1,2,3,4,5)
np_array_from_tuple = np.array(py_tuple)
print(np_array_from_tuple)

array = np.array([1,2,3],dtype=float)
print(array)

arr = np.arange(1,10,2)
print(arr)

arr = np.linspace(0,1,5)
print(arr)

arr = np.zeros((2,3))
print(arr)

arr = np.ones((2,3))
print(arr)

random_array = np.random.rand(2,3)
print(random_array)

random_array = np.random.randint(0,10,size=(2,3))
print(random_array)

random_normal = np.random.randn(2,3)
print(random_normal)

arr = np.arange(6)
reshaped_arr = arr.reshape(2,3)
print(reshaped_arr)

arr = np.arange(6)
resized_arr = arr.resize((3,2))
print(resized_arr)

arr = np.arange(6)
arr.resize((3,2))
print(arr)

"""# Numpy Array Attributes"""

arr_1d = np.array([1,2,3])
arr_2d = np.array([[1,2,3],[4,5,6]])
print("1d array dimension: ",arr_1d.ndim)
print("2d array dimension: ",arr_2d.ndim)

arr = np.array([[1,2,3],[4,5,6]])
print("array shape is: ",arr.shape)

arr = np.array([[1,2,3],[4,5,6]])
print("array size is: ",arr.size)

arr_int = np.array([1,2,3])
print("data type of an arr_int is: ",arr_int.dtype)

arr_float = np.array([1.1,2.2,3.3])
print("data type of an arr_float is: ",arr_float.dtype)

arr = np.array([1,2,3],dtype=float)
print(arr.dtype)

arr = np.array([1,2,3],dtype=int)
print("itemsize is: ",arr.itemsize)

arr = np.array([1,2,3])
print("raw data of the array: ",arr.data)

"""# Array Indexing And Sclicing"""

arr=np.array([10,20,30,40,50])
print(arr[0])
print(arr[3])

arr=np.array([10,20,30,40,50])
print(arr[-1])
print(arr[-3])

arr = np.array([10,20,30,40,50])
print(arr[1:4])
print(arr[::2])

arr = np.array([10,20,30,40,50])
print(arr[-4:-1])

arr = np.array([[10,20,30],[40,50,60],[70,80,90]])
print(arr[1,2])

arr = np.array([[10,20,30],[40,50,60],[70,80,90]])
print(arr)

arr = np.array([[10,20,30],[40,50,60],[70,80,90]])
print(arr[0:2,1:3])

arr = np.array([10,20,30,40,50])
indices = [0,2,4]
print(arr[indices])

arr = np.array([10,20,30,40,50])
condition = arr>25
print(arr[condition])

arr = np.array([10,20,30,40,50])
condition = (arr>20) & (arr<50)
print(arr[condition])

"""# Array Operations"""

arr1 = np.array([1,2,3])
arr2 = np.array([4,5,6])
result = arr1+arr2
print(result)

arr1 = np.array([1,2,3])
arr2 = np.array([4,5,6])
result = arr1-arr2
print(result)

arr1 = np.array([1,2,3])
arr2 = np.array([4,5,6])
result = arr1*arr2
print(result)

arr1 = np.array([1,2,3])
arr2 = np.array([4,5,6])
result = arr1/arr2
print(result)

arr1 = np.array([1,2,3])
arr2 = np.array([10])
result = arr1+arr2
print(result)

"""# Mathematical Functions"""

arr=np.array([10,20,30,40])
total = np.sum(arr)
print(total)

arr=np.array([10,20,30,40])
mean = np.mean(arr)
print(mean)

arr=np.array([10,20,30,40])
std = np.std(arr)
print(std)

arr=np.array([10,20,30,40])
sqrt = np.sqrt(arr)
print(sqrt)

arr=np.array([1,4,9,16])
sqrt = np.sqrt(arr)
print(sqrt)

arr = np.array([0,1,2])
exp = np.exp(arr)
print(exp)

import numpy as np

arr = np.array([1,np.e,np.e**2])
log_arr = np.log(arr)
print(log_arr)

arr = np.array([0,np.pi/2,np.pi])
sin_arr = np.sin(arr)
print(sin_arr)

"""# ****Reshaping and Concatenating Arrays****"""

arr = np.array([1,2,3,4,5,6])
reshaped_arr = arr.reshape(2,3)
print(reshaped_arr)

arr = np.array([[1,2],[3,4],[5,6]])
flattened_arr = arr.flatten()
print(flattened_arr)

arr = np.array([[1,2],[3,4],[5,6]])
ravel_arr = arr.flatten()

print(ravel_arr)

import numpy as np

arr1 = np.array([1,2,3])
arr2 = np.array([4,5,6])
stacked_arr = np.vstack((arr1,arr2))
print(stacked_arr)

arr1 = np.array([1,2,3])
arr2 = np.array([4,5,6])
stacked_arr = np.hstack((arr1,arr2))
print(stacked_arr)

arr1 = np.array([1,2,3])
arr2 = np.array([4,5,6])
concatenated_arr = np.concatenate((arr1,arr2),axis=0)
print(concatenated_arr)

arr1 = np.array([[1,2],[3,4]])
arr2 = np.array([[5,6],[7,8]])
concatenated_arr = np.concatenate((arr1,arr2),axis=1)
print(concatenated_arr)

